from aiogram import Bot, types, executor
from config import TOKEN_API, WEATHER_API
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Command
# from Other import number
# from calc_complex import calc_complex_main
# from calc_fraction import calc_fraction_main
# from calc_log_reader import log_reader
import requests
import logging
# markups as nav
logging.basicConfig(level=logging.INFO)
import datetime

bot = Bot(TOKEN_API)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–∫–∞ —á—Ç–æ —É–º–µ—é –≤—ã—á–∏—Å–ª—è—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É!\n"
                        "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help")
    await message.delete()


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply('''–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: /calculate\n–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã: /Weather ''')
#
# @dp.message_handler(commands=['calculate'])
# async def calc_command(message: types.Message):
#     await message.reply(f'''–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤:
#       –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞: /complex –≤–∏–¥ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ -> a+bj + c-dj
#       –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞: /fraction –≤–∏–¥ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ -> a/b + c/d
#       –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: /calc_log''')
#
# @dp.message_handler(commands=['complex'])
# async def complex_command(message: types.Message, command: Command):
#     await message.reply(f" {calc_complex_main(command.args)}")
#
# @dp.message_handler(commands=['fraction'])
# async def fraction_command(message: types.Message, command: Command):
#     await message.reply(f" {calc_fraction_main(command.args)}")
#
# @dp.message_handler(commands=['calc_log'])
# async def log_command(message: types.Message):
#     await message.reply(log_reader())

@dp.message_handler(commands=['weather','w'])
async def choose(message: types.Message):

    code_to_emoji = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "Rain": "–î–æ–∂–¥—å ‚òîÔ∏è",
        "Drizzle": "–ú–æ—Ä–æ—Å—å ü´ß",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ üå©",
        "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "Mist": "–¢—É–º–∞–Ω üå´"
    }

    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message}&appid={WEATHER_API}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_emoji:
            wd = code_to_emoji[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á—Ç–æ —Ç–∞–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        temp_max = data["main"]["temp_max"]
        temp_min = data["main"]["temp_min"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        await message.answer(f"----{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}----\n"
                            f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: {city}\n–° —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –≤–æ–∑–¥—É—Ö–∞: {int(cur_weather)}¬∞C {wd}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–¥—É—Ö–∞: {humidity}%\n–° –¥–∞–≤–ª–µ–Ω–∏–µ–º –≤–æ–∑–¥—É—Ö–∞: {pressure}–º–º.—Ä—Ç.—Å—Ç"
                            f"\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {int(temp_max)}¬∞C\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {int(temp_min)}¬∞C\n"
                            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind}–º/—Å\n–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n"
                            f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!ü§ó")

    except:

        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! üçé")
if __name__ == '__main__':
    executor.start_polling(dp)

